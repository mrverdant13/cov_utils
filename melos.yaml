name: coverde

packages:
  - "**"

scripts:
  d:
    description: Install dependencies for a selected package.
    run: melos exec -c 1 -- dart pub get
    select-package:
  D:
    description: Install dependencies for all packages.
    run: melos run d --no-select
  D:ci:
    description: Install dependencies for all packages.
    run: melos exec -- dart pub get

  g:
    description: Run code generation for a selected package.
    run: melos exec -c 1 -- dart pub run build_runner build --delete-conflicting-outputs
    select-package:
      depends-on: build_runner
  G:
    description: Run code generation for all packages.
    run: melos run g --no-select

  f:
    description: Format codebase for a selected package.
    run: melos exec -c 1 -- dart format --fix lib test
    select-package:
  F:
    description: Format codebase for all packages.
    run: melos run f --no-select
  F:ci:
    description: Format codebase for all packages and stop if a change is identified.
    run: melos exec --fail-fast -- dart format --set-exit-if-changed lib test

  a:
    description: Analyze codebase for a selected package considering infos and warnings as errors.
    run: melos exec -c 1 -- dart analyze --fatal-infos --fatal-warnings .
    select-package:
  A:
    description: Analyze codebase for all packages considering infos and warnings as errors.
    run: melos run a --no-select
  A:ci:
    description: Analyze codebase for all packages considering infos and warnings as errors.
    run: melos exec --fail-fast -- dart analyze --fatal-infos --fatal-warnings .

  t:
    description: Run tests and generate coverage tracefile for a selected package in random order.
    run: melos exec -c 1 -- "dart test -x ci-only --coverage=coverage -r expanded --test-randomize-ordering-seed random --color && format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.packages --report-on=lib"
    select-package:
      dir-exists: test
  T:
    description: Run tests and generate coverage tracefiles for all packages in random order.
    run: melos run t --no-select
  T:ci:
    description: Run tests and generate coverage tracefiles for all packages in random order.
    run: melos exec --fail-fast --dir-exists=test -- "dart test -x ci-only --coverage=coverage -r expanded --test-randomize-ordering-seed random && format_coverage --lcov --in=coverage --out=coverage/lcov.info --packages=.packages --report-on=lib"

  M:
    description: Merge all packages coverage tracefiles ignoring data related to generated files.
    run: >
      coverde rm MELOS_ROOT_PATH/coverage/filtered.lcov.info &&
      melos exec --file-exists=coverage/lcov.info -- coverde filter --input ./coverage/lcov.info --output MELOS_ROOT_PATH/coverage/filtered.lcov.info --filters \.asset\.dart

  R:
    description: Generate HTML coverage report.
    run: coverde report --input ./coverage/lcov.info

  FA:
    description: Format and analyze.
    run: melos run D && melos run F && melos run A
  FA:ci:
    description: Format and analyze.
    run: melos run D:ci && melos run F:ci && melos run A:ci

  TMC:
    description: Run tests, generate unified coverage trace file and check minimum coverage.
    run: melos run T && melos run M && coverde check 100
  TMC:ci:
    description: Run tests, generate unified coverage trace file and check minimum coverage.
    run: melos run T:ci && melos run M && coverde check 100

  WF:
    description: Run full local workflow
    run: melos run FA && melos run TMC
  WF:ci:
    description: Run full CI workflow
    run: melos run FA:ci && melos run TMC:ci
